// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model user {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  username  String  @unique
  email     String  @unique
  otp       String?
  verified  Boolean @default(false)
  password  String
  posts     post[]
  savedPost saved[]
  likes     likes[]
}

model post {
  id      String     @id @default(auto()) @map("_id") @db.ObjectId
  title   String
  summary String
  time    DateTime   @default(now())
  upvotes upvote[]
  comment comments[]
  save    saved[]
  user    user?      @relation(fields: [userId], references: [id])
  userId  String?    @db.ObjectId
}

model saved {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  postId    String   @db.ObjectId
  savedTime DateTime @default(now())
  user      user?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
  post      post     @relation(fields: [postId], references: [id])
}

model upvote {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  userId String
  post   post?   @relation(fields: [postId], references: [id])
  postId String? @db.ObjectId
}

model comments {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  time    DateTime @default(now())
  comment String
  like    likes[]
  userId  String
  post    post?    @relation(fields: [postId], references: [id])
  postId  String?  @db.ObjectId
}

enum Options {
  Like
  Dislike
  None
}

model likes {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  LikeDislike Options   @default(None)
  user        user      @relation(fields: [userId], references: [id])
  userId      String    @db.ObjectId
  comments    comments? @relation(fields: [commentsId], references: [id])
  commentsId  String?   @db.ObjectId
}
